{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","GifGridItem","img","className","src","alt","title","GifGrid","category","images","setImages","useEffect","getGifs","a","url","fetch","resp","json","data","gifs","map","gif","id","downsized_medium","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"6LAiCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAerC,OACI,0BAAMC,SARW,SAACC,GAClBA,EAAEC,iBACEJ,IACAF,GAAe,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,OAC7CJ,EAAc,OAKd,2BACIK,KAAK,OACLC,MAAOP,EACPQ,SAjBW,SAACL,GACpBF,EAAcE,EAAEM,OAAOF,Y,uBCLlBG,EAAc,SAAC,GAAc,IAAZC,EAAW,EAAXA,IAE1B,OACI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,UAAUC,IAAKF,EAAIA,IAAKG,IAAKH,EAAII,SAEpD,uBAAGH,UAAU,aAAaD,EAAII,SCqC3BC,EA3CC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAEFlB,mBAAS,IAFP,mBAEvBmB,EAFuB,KAEfC,EAFe,KAI9BC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAO,uCAAG,oCAAAC,EAAA,6DACNC,EADM,0FACmFN,EADnF,qBAEOO,MAAMD,GAFb,cAENE,EAFM,gBAGSA,EAAKC,OAHd,gBAGLC,EAHK,EAGLA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRpB,IAAKmB,EAAIZ,OAAOc,iBAAiBT,IACjCR,MAAOe,EAAIf,UAInBI,EAAUS,GAbE,4CAAH,qDAiBb,OACI,oCACI,4BAAKX,GACL,yBAAKL,UAAU,aAGPM,EAAOW,KAAI,SAAAI,GACT,OAAO,kBAAC,EAAD,CACPC,IAAKD,EAAMF,GACXpB,IAAKsB,UCVZE,EAvBM,WAAM,IAAD,EAEcpC,mBAAU,IAFxB,mBAEfM,EAFe,KAEHP,EAFG,KAOtB,OACI,oCACI,gDACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,wBAAIc,UAAU,WAENP,EAAWwB,KAAK,SAACZ,GACb,OAAO,kBAAC,EAAD,CAASA,SAAYA,EAAUiB,IAAKjB,U,MCZnEmB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.75dad192.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleOnChange = (e) => {\n        setInputValue(e.target.value)\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue){\n            setCategories( categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                value={inputValue}\n                onChange={handleOnChange}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","import React from 'react'\n\nexport const GifGridItem = ( {img}  ) => {\n        \n    return (\n        <div className=\"card animate__fadeIn\">\n            <div className=\"img-div \">\n                <img className=\"gif-img\" src={img.img} alt={img.title} />\n            </div>\n            <p className=\"img-title\">{img.title}</p>\n        </div>\n    )\n} ","import React, {useEffect, useState} from 'react';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ( {category }) => {\n\n    const [images, setImages] = useState([]);\n\n    useEffect(() => {\n        getGifs();\n    }, [])\n\n    const getGifs = async() => {\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=KnqrOs6orhs7p7WzbKTdNlZ8JhHtdAxJ&q=${category}&limit=5`\n        const resp = await fetch(url);\n        const {data} = await resp.json();\n\n        const gifs = data.map(gif => {\n            return {\n                id: gif.id,\n                img: gif.images.downsized_medium.url,\n                title: gif.title,\n            }\n        })\n        \n        setImages(gifs)\n    }\n\n\n    return (\n        <>\n            <h3>{category}</h3>\n            <div className=\"card-grid\">\n            \n                {\n                    images.map(image => {\n                      return <GifGridItem \n                      key={image.id}\n                      img={image}/>\n                    })\n                }\n            \n             </div>\n        </>\n    )\n}\n\nexport default GifGrid","import React, {useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport  GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () =>{\n    \n    const [categories, setCategories] = useState( [])\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, \"Shingeki\"])\n    // }\n    return (\n        <>\n            <h2>Search anything!</h2>\n            <hr/>\n            <AddCategory setCategories={setCategories}/>\n            <ol className=\"ol-item\">\n                {\n                    categories.map( (category) => {\n                        return <GifGrid category = {category} key={category} />\n                    })\n                }\n            </ol>\n        </> \n    )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}